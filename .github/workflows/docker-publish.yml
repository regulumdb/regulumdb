name: Publish

on:
  push:
    # Publish `stable` as Docker `latest` image.
    branches:
      - main
      - canary
      - rc
      - stable

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
    # Don't run if only the docs are changed.
    paths-ignore:
      - 'docs/**'

env:
  TERMINUSDB_STORE_PROLOG_VERSION: v0.19.1
  TUS_VERSION: v0.0.5

jobs:
  test_and_push_docker:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: terminusdb/terminusdb-server


    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME:local

      - name: Run tests
        run: docker run --name terminusdb terminusdb/terminusdb-server:local /app/terminusdb/terminusdb test

      - name: Log into Docker Container Registry
        if: github.event_name != 'pull_request'
        run: echo '${{ secrets.DOCKER_PASS }}' | docker login -u terminusdb --password-stdin

      - name: Push image to Docker Container Registry
        if: github.event_name != 'pull_request'
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "stable" ] && VERSION=latest
          [ "$VERSION" == "main" ] && VERSION=dev

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME:local $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  fedora_bin:
    runs-on: ubuntu-latest
    needs: test_and_push_docker
    steps:
      - uses: actions/checkout@v2
      - run: git clone --single-branch --branch "$TUS_VERSION" 'https://github.com/terminusdb/tus.git'
      - run: sudo docker run --name=fedora -v $(pwd)/tus:/usr/share/swi-prolog/pack/tus -v $(pwd):/app/terminusdb ghcr.io/terminusdb/terminus_store_prolog/terminus_store_prolog_fedora:latest bash -c "cd /app/terminusdb && make bin"
      - run: sudo docker cp fedora:/app/terminusdb/terminusdb fedora-bin
      - name: Upload rpm Artifact
        uses: actions/upload-artifact@v2
        with:
            name: terminusdb-fedora-bin
            path: fedora-bin

  deb_and_rpm:
    runs-on: ubuntu-latest
    needs: [test_and_push_docker, appimage, fedora_bin]
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: TerminusDB-amd64.AppImage

    - run: mv *.AppImage terminusdb && chmod +x terminusdb

    - uses: actions/download-artifact@v2
      with:
        name: terminusdb-fedora-bin

    - run: sudo apt install rpm && sudo gem install --no-document fpm

    - run: make deb

    - name: Upload deb Artifact
      uses: actions/upload-artifact@v2
      with:
        name: terminusdb-deb
        path: terminusdb*.deb

    - name: Rename fedora bin and give executable permissions
      run: mv fedora-bin terminusdb && chmod +x terminusdb

    - run: make rpm

    - name: Upload rpm Artifact
      uses: actions/upload-artifact@v2
      with:
        name: terminusdb-rpm
        path: terminusdb*.rpm

    - name: Upload to bintray repo
      if: github.event_name != 'pull_request'
      run: |
          BRANCH=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(grep 'VERSION=' Makefile | sed 's/VERSION=//g')
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          DEB_DISTRIBUTIONS="deb.distribution=buster;deb.distribution=bullseye;deb.distribution=groovy;deb.distribution=focal;deb.distribution=bionic"

          if [ $(echo "${{ github.ref }}" | grep "tag") ]; then
            curl -T terminusdb*.deb -u "robin@terminusdb.com:${{ secrets.JFROG_ACCESS_TOKEN }}" -XPUT "https://terminusdb.jfrog.io/artifactory/terminusdb-deb/pool/terminusdb_${VERSION}_amd64.deb;$DEB_DISTRIBUTIONS;deb.component=main;deb.architecture=amd64"
          fi
          # Upload to dev/canary/rc/production repo
          if [ $(echo "$BRANCH" | grep -P "main|canary|rc") ]; then
            [[ "$BRANCH" == "main" ]] && BRANCH="dev" # If branch is main, use dev deb
            curl -T terminusdb*.deb -u "robin@terminusdb.com:${{ secrets.JFROG_ACCESS_TOKEN }}" -XPUT "https://terminusdb.jfrog.io/artifactory/terminusdb-deb-$BRANCH/pool/terminusdb_${VERSION}_amd64;$DEB_DISTRIBUTIONS;deb.component=main;deb.architecture=amd64"
          fi


  appimage:
    runs-on: ubuntu-18.04

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        sudo apt-add-repository ppa:swi-prolog/stable -y
        sudo apt-get update -y
        sudo apt-get install swi-prolog-nox libpcre3 -y

    - name: Create appimage
      run: |
        cd distribution/appimage
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        if [[ $(echo "${{ github.ref }}" | grep "refs/pull") ]]; then
           BRANCH=$(echo "${{ github.base_ref }}" | sed -e 's,.*/\(.*\),\1,')
        else
           BRANCH=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        fi
        ./build_script.sh "$BRANCH" "$TERMINUSDB_STORE_PROLOG_VERSION" "$TUS_VERSION"
        mv "TerminusDB-$(echo $GITHUB_SHA | cut -c 1-7)-x86_64.AppImage" TerminusDB-amd64.AppImage

    - name: Run AppImage tests
      run: cd distribution/appimage && chmod +x TerminusDB-amd64.AppImage && ./TerminusDB-amd64.AppImage test

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: TerminusDB-amd64.AppImage
        path: distribution/appimage/TerminusDB-amd64.AppImage

  deploy:
    runs-on: ubuntu-latest
    needs: [test_and_push_docker, appimage, deb_and_rpm]
    if: ${{ github.event_name != 'pull_request' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/stable' }}

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2

    - name: Set release name
      id: release_name
      run: |
        SUFFIX=""
        if echo "$GITHUB_REF" | grep -P "canary|rc" ; then SUFFIX="-tag"; fi
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        TAG_WITH_SUFFIX="$TAG$SUFFIX"
        echo "::set-output name=tag::$TAG_WITH_SUFFIX"

    - name: Delete tag and release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
      continue-on-error: true

    - name: Create a Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
        prerelease: ${{ !contains(github.ref, 'tags') }}
        files: |
          TerminusDB-amd64.AppImage/TerminusDB-amd64.AppImage
          terminusdb-deb/terminusdb*.deb
          terminusdb-rpm/terminusdb*.rpm
