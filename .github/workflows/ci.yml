name: CI

on:
  push:
    branches:
    tags:
    paths-ignore:
      - 'docs/**'
      - LICENSE
      - README.md
  pull_request:
    # Don't run if only the docs are changed.
    paths-ignore:
      - 'docs/**'
      - LICENSE
      - README.md
  workflow_dispatch:

env:
  TERMINUSDB_STORE_PROLOG_VERSION: v0.19.6
  TUS_VERSION: v0.0.5
  DOCKER_IMAGE_NAME: terminusdb/terminusdb-server

jobs:

  # Check if this job is already running with the same or newer content.
  #
  # This should never skip push events: they are used by begin_deploy.
  check_skip:
    runs-on: ubuntu-latest

    outputs:
      should_skip: ${{ steps.check_skip.outputs.should_skip }}

    steps:
      - uses: fkirc/skip-duplicate-actions@master
        id: check_skip
        with:
          concurrent_skipping: same_content_newer
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install python requirements
        run: pip install beautifulsoup4 requests
      - name: Run linter
        run: python3 src/utils/lint_modules.py

  # Build the Docker image.
  build_docker:
    runs-on: ubuntu-latest

    # Check if this job needs to run. We skip a pull_request after a push.
    needs: check_skip
    if: needs.check_skip.outputs.should_skip != 'true'

    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag $DOCKER_IMAGE_NAME:local
          docker save $DOCKER_IMAGE_NAME:local | gzip > terminusdb-server-docker-image.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
            name: terminusdb-server-docker-image
            path: terminusdb-server-docker-image.tar.gz

  # Unit tests
  unit_tests:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Run unit tests
        run: |
          docker load < terminusdb-server-docker-image.tar.gz
          docker run --name terminusdb $DOCKER_IMAGE_NAME:local /app/terminusdb/terminusdb test

  # Integration tests
  integration_tests:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Run server
        run: |
          docker load < terminusdb-server-docker-image.tar.gz
          docker run $DOCKER_IMAGE_NAME:local make check-imports
          docker run --detach --publish 6363:6363 $DOCKER_IMAGE_NAME:local

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - uses: actions/checkout@v2

      - name: Run integration tests
        working-directory: tests
        env:
          TERMINUSDB_USER: admin
          TERMINUSDB_PASS: root
        run: |
          npm install
          npm run check
          npm test

  # Begin deployment only for push events and certain refs.
  #
  # This is an empty job that serves as a common dependency for downstream jobs
  # in their `needs`.
  begin_deploy:
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' && (
        github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/canary' ||
        github.ref == 'refs/heads/rc' ||
        github.ref == 'refs/heads/stable' ||
        startsWith(github.ref, 'refs/tags/v')
      )

    steps:
      - name: Begin deploy
        run: |
          echo "Deploying for:"
          echo "  event: ${{ github.event_name }}"
          echo "  ref:   ${{ github.ref }}"

  # Push Docker image to container repository.
  push_docker:
    runs-on: ubuntu-latest
    needs: begin_deploy

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Push image to Docker Container Registry
        run: |
          echo '${{ secrets.DOCKER_PASS }}' | docker login -u terminusdb --password-stdin

          IMAGE_ID=$DOCKER_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          [ "$VERSION" == "main" ] && VERSION=dev

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker load < terminusdb-server-docker-image.tar.gz
          docker tag $DOCKER_IMAGE_NAME:local $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          # Use dev-COMMITHASH tag for each development
          # version. We clean up after a certain amount of time.
          if [ "$VERSION" == "dev" ]; then
             DEV_COMMIT_TAG=${IMAGE_ID}:${VERSION}-${GITHUB_SHA}
             docker tag $DOCKER_IMAGE_NAME:local $DEV_COMMIT_TAG
             docker push $DEV_COMMIT_TAG
          fi

          # Use Docker `latest` tag convention when a version tag is pushed
          if [ $(echo "$GITHUB_REF" | grep "refs/tags/v") ]; then
             docker tag $IMAGE_ID:$VERSION ${IMAGE_ID}:latest
             docker push ${IMAGE_ID}:latest
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [push_docker]
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' && (
        github.ref == 'refs/heads/canary' ||
        github.ref == 'refs/heads/rc' ||
        startsWith(github.ref, 'refs/tags/v')
      )

    steps:
    - uses: actions/checkout@v2

    - name: Set release name
      id: release_name
      run: |
        SUFFIX=""
        if echo "$GITHUB_REF" | grep -P "canary|rc" ; then SUFFIX="-tag"; fi
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        TAG_WITH_SUFFIX="$TAG$SUFFIX"
        echo "::set-output name=tag::$TAG_WITH_SUFFIX"

    - name: Delete tag and release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
      continue-on-error: true

    - name: Create a Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
        prerelease: ${{ !contains(github.ref, 'tags') }}
